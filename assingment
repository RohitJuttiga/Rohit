from fastapi import FastAPI, HTTPException
from typing import Dict
import json
import math

app = FastAPI()


@app.post("/calculator/add")
def add(numbers: Dict[str, float]):
    try:
        number1 = numbers["number1"]
        number2 = numbers["number2"]
        result = number1+number2
        result = json.loads(json.dumps(result))
        if result.is_integer():
            result = math.ceil(result)
            return result
        else:
            return result

    except Exception:
        raise HTTPException(status_code=500, detail="provide values")


@app.post("/calculator/subtract")
def subtract(numbers: Dict[str, float]):
    try:
        number1 = numbers["number1"]
        number2 = numbers["number2"]
        result = number1 - number2
        result = json.loads(json.dumps(result))
        if result.is_integer():
            result = math.ceil(result)

            return result
        else:
            return result

    except Exception:
        raise HTTPException(status_code=500, detail="provide values")


@app.post("/calculator/multiply")
def multiply(numbers: Dict[str, float]):
    try:
        number1 = numbers["number1"]
        number2 = numbers["number2"]
        result = number1 * number2
        result = json.loads(json.dumps(result))
        if result.is_integer():
            result = math.ceil(result)
            return result
        else:
            return result

    except Exception:
        raise HTTPException(status_code=500, detail="provide values")


@app.post("/calculator/divide")
def divide(numbers: Dict[str, float]):
    try:
        number1 = numbers["number1"]
        number2 = numbers["number2"]
        if number2 == 0:
            return json.loads(json.dumps("Cannot divide by 0"))
        quotient = number1 / number2
        remainder = number1 % number2
        quotient = json.loads(json.dumps(quotient))
        remainder = json.loads(json.dumps(remainder))
        if quotient.is_integer():
            quotient = math.ceil(quotient)
            return {"quotient": quotient, "remainder": remainder}
        else:
            return {"quotient": quotient, "remainder": remainder}

    except Exception:
        raise HTTPException(status_code=500, detail="provide values")
